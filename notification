Step 1: Setting Up a Slack App and Obtaining a Webhook URL
To get started, you’ll need to set up a Slack app and obtain a webhook URL. Follow these instructions:

a) Go to the Slack API website and sign in to your workspace.
b) Create a new Slack app for your GitLab CI integration.
c) In the app settings, navigate to the “Incoming Webhooks” section and enable it.
d) Add a new webhook to your workspace and configure it according to your preferences.
e) Copy the generated webhook URL, as you’ll need it in the next step.

Step 2: Configuring GitLab CI to Utilize the Slack Integration
With the Slack webhook URL in hand, it’s time to configure GitLab CI to utilize the integration. Follow these steps:

a) Open your GitLab project and navigate to “Settings” > “CI/CD” > “Variables.”
b) Click on “Add Variable” to create a new environment variable.
c) Set the variable name as SLACK_WEBHOOK.
d) In the value field, paste the Slack webhook URL you obtained in Step 1.
e) Uncheck the “Protect variable” option to ensure it can be accessed in the after_script section.
f) Save the variable to apply the changes.



Sample after script written below


stages:
  - git-clone
  - build
  - deploy

clone_private_repo:
  stage: git-clone
  script:
    - git clone https://$GITHUB_TOKEN@github.com/emzm/gitlabtest1.git
    - cd gitlabtest1  # Navigate to the cloned repository
    - git checkout qa
    - ls -la

build_job:
  stage: build
  script:
    - echo "Here, run your build commands..."
    - echo "npm install"
    - echo "npm run build"

deploy_job:
  stage: deploy
  script:
    - echo "Here, run your deployment commands..."
    - echo "scp files to server or run ansible playbook"

after_script:
  - >
    # This will run after *each job* in any stage.
    # We only want to send Slack notifications for specific stages:
    if [ "$CI_JOB_STAGE" == "git-clone" ] || [ "$CI_JOB_STAGE" == "build" ] || [ "$CI_JOB_STAGE" == "deploy" ]; then
      
      # Set timezone to Riyadh (UTC+3)
      export TZ="Asia/Riyadh"

      # Format deployment date in UTC+3
      DEPLOYMENT_DATE=$(date +"%Y-%m-%dT%H:%M:%SZ" -u | TZ="Asia/Riyadh" date +"%Y-%m-%dT%H:%M:%S AST")

      # Safely get 'version' from package.json (if it exists)
      VERSION=$(jq -r .version package.json 2>/dev/null || echo "unknown")

      # Convert job status to uppercase
      CI_JOB_STATUS_UPPER=${CI_JOB_STATUS^^}

      # Choose emoji based on success/failure
      if [ "$CI_JOB_STATUS" == "success" ]; then
        EMOJI_STATUS=":white_check_mark:"
      else
        EMOJI_STATUS=":exclamation:"
      fi

      # Send Slack notification
      curl -X POST -H 'Content-type: application/json' --data "{
        \"text\": \"*Project:* $CI_PROJECT_NAME\n*App Version:* $VERSION\n*Job:* $CI_JOB_NAME\n*Stage:* $CI_JOB_STAGE\n*User:* $GITLAB_USER_NAME\n*Deployment Date:* $DEPLOYMENT_DATE\n*Status:* $CI_JOB_STATUS_UPPER $EMOJI_STATUS\n*Details:* <$CI_JOB_URL|Job Details>\",
        \"mrkdwn\": true
      }" $SLACK_WEBHOOK;
    fi
